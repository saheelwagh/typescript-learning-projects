{"version":3,"file":"index.module.js","sources":["../src/utlis.ts","../src/index.ts"],"sourcesContent":["export function formattedDate(date: Date) : string {\n    // returns date as 11/11/2021\n    // other times it returns 11/11/2021, 12:00:00 AM\n    // which is why we call the .split at the end \n    //what does .split do ?\n    return date.toLocaleDateString('en-US')\n}\n\nexport interface Streak {\n    currentCount : number\n    startDate : string\n    lastLoginDate : string\n}\n\nexport function buildStreak (\n    date : Date,\n    overrideDefaults? : Partial<Streak>) : Streak {\n        const defaultStreak = {\n            currentCount: 1,\n            startDate: formattedDate(date),\n            lastLoginDate: formattedDate(date),\n          }\n        return {\n            ...defaultStreak,\n            ...overrideDefaults\n        }\n    }\nexport const KEY = \"streak\";\nexport  function updateStreak(storage : Storage, streak: Streak): void {\n    storage.setItem(KEY, JSON.stringify(streak))\n} ","import {buildStreak, formattedDate} from './utlis'\n// an interface specifies what properties are expected to exist on a value\nimport { Streak } from './utlis'\nimport { KEY } from './utlis'\nimport { updateStreak } from './utlis'\n\nfunction shouldIncrementOrResetStreakCount(currentDate: Date, lastLoginDate: string) : 'increment' | 'reset' | 'none'{\n     // We get 11/5/2021\n    // so to get 5, we split on / and get the second item\n    const difference = currentDate.getDate() - parseInt(lastLoginDate.split('/')[1])\n\n    if(difference===0){\n        return 'none'\n    }\n    \n    if(difference ===1){ //if they logged in on a consecutive day\n        return 'increment'\n    }\n    return 'reset'\n}\n\nexport function streakCounter(storage: Storage, date: Date) : Streak {\n    const streakInLocalStorage = storage.getItem(KEY) //in the function call, localstorage is passed as storage through the param\n\n    if(streakInLocalStorage){\n        try {\n            const streak = JSON.parse(streakInLocalStorage) as Streak\n            const state = shouldIncrementOrResetStreakCount(date, streak.lastLoginDate)\n            const SHOULD_INCREMENT = state === \"increment\"\n            const SHOULD_RESET = state === \"reset\"\n            if(SHOULD_INCREMENT){\n                const updatedStreak = buildStreak(date, {\n                    startDate : streak.startDate,\n                    currentCount : streak.currentCount+1,\n                    lastLoginDate : formattedDate(date)\n                })\n                //save updated streak count to localStorage\n                updateStreak(storage,updatedStreak)\n            return updatedStreak\n            }\n            if(SHOULD_RESET){ \n                const updatedStreak = buildStreak(date)\n            //store in localStorage\n                updateStreak(storage,updatedStreak)\n                return updatedStreak\n            }\n            \n            return streak\n        }\n        catch (error) {\n            console.error('failed to parse streak from localStorage')\n        }\n    }\n\n    const streak = buildStreak(date)\n    //store in localStorage\n    updateStreak(storage, streak) //how did storage.setitem become available by default ?\n    return streak\n}"],"names":["formattedDate","date","toLocaleDateString","buildStreak","overrideDefaults","currentCount","startDate","lastLoginDate","updateStreak","storage","streak","setItem","JSON","stringify","streakCounter","streakInLocalStorage","getItem","parse","state","currentDate","difference","getDate","parseInt","split","shouldIncrementOrResetStreakCount","SHOULD_RESET","updatedStreak","error","console"],"mappings":"yNAAgBA,EAAcC,GAK1B,OAAOA,EAAKC,mBAAmB,kBASnBC,EACZF,EACAG,GAMI,YALsB,CAClBC,aAAc,EACdC,UAAWN,EAAcC,GACzBM,cAAeP,EAAcC,IAI1BG,GAIEI,SAAAA,EAAaC,EAAmBC,GAC7CD,EAAQE,QAFO,SAEMC,KAAKC,UAAUH,ICRxBI,SAAAA,EAAcL,EAAkBR,GAC5C,MAAMc,EAAuBN,EAAQO,QDKtB,UCHf,GAAGD,EACC,IACI,MAAML,EAASE,KAAKK,MAAMF,GACpBG,EArBlB,SAA2CC,EAAmBZ,GAG1D,MAAMa,EAAaD,EAAYE,UAAYC,SAASf,EAAcgB,MAAM,KAAK,IAE7E,OAAgB,IAAbH,EACQ,OAGM,IAAdA,EACQ,YAEJ,QASeI,CAAkCvB,EAAMS,EAAOH,eAEvDkB,EAAyB,UAAVP,EACrB,GAFmC,cAAVA,EAEL,CAChB,MAAMQ,EAAgBvB,EAAYF,EAAM,CACpCK,UAAYI,EAAOJ,UACnBD,aAAeK,EAAOL,aAAa,EACnCE,cAAgBP,EAAcC,KAItC,OADIO,EAAaC,EAAQiB,GAClBA,EAEP,GAAGD,EAAa,CACZ,MAAMC,EAAgBvB,EAAYF,GAGlC,OADAO,EAAaC,EAAQiB,GACdA,EAGX,OAAOhB,EAEX,MAAOiB,GACHC,QAAQD,MAAM,4CAItB,MAAMjB,EAASP,EAAYF,GAG3B,OADAO,EAAaC,EAASC,GACfA"}